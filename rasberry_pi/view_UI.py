# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'fullscreen_ex2.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5.QtCore import pyqtSignal

try:
    import Queue
except:
    import queue as Queue
import sys, time, serial

from PyQt5 import QtCore, QtGui, QtWidgets

SER_TIMEOUT = 0.1  # Timeout for serial Rx
RETURN_CHAR = "\n"  # Char to be sent when Enter key pressed
PASTE_CHAR = "\x16"  # Ctrl code for clipboard paste
baudrate = 115200  # Default baud rate
portname = '/dev/ttyUSB0'  # Default port name
hexmode = False  # Flag to enable hex display


def str_bytes(s):
    return s.encode('latin-1')


# Convert bytes to string
def bytes_str(d):
    return d if type(d) is str else "".join([chr(b) for b in d])


class Ui_MainWindow(object):
    input_button_cnt = 0
    home_button_cnt = 0

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 480)
        MainWindow.setMaximumSize(QtCore.QSize(800, 480))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setGeometry(QtCore.QRect(0, 0, 791, 451))
        self.stackedWidget.setObjectName("stackedWidget")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.label = QtWidgets.QLabel(self.page)
        self.label.setGeometry(QtCore.QRect(160, 160, 441, 101))
        font = QtGui.QFont()
        font.setFamily("Adobe Devanagari")
        font.setPointSize(48)
        self.label.setFont(font)
        self.label.setObjectName("label")

        self.stackedWidget.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.pushButton_2 = QtWidgets.QPushButton(self.page_2)
        self.pushButton_2.setGeometry(QtCore.QRect(580, 360, 131, 61))
        self.pushButton_2.clicked.connect(self.btn_fun2)
        self.pushButton_2.setObjectName("pushButton_2")
        self.label_2 = QtWidgets.QLabel(self.page_2)
        self.label_2.setGeometry(QtCore.QRect(150, 150, 521, 91))
        font = QtGui.QFont()
        font.setFamily("Adobe Devanagari")
        font.setPointSize(20)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.stackedWidget.addWidget(self.page_2)
        self.page_3 = QtWidgets.QWidget()
        self.page_3.setObjectName("page_3")

        self.progressBar = QtWidgets.QProgressBar(self.page_3)
        self.progressBar.setGeometry(QtCore.QRect(180, 170, 411, 121))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")

        self.label_3 = QtWidgets.QLabel(self.page_3)
        self.label_3.setGeometry(QtCore.QRect(80, 60, 341, 61))
        font = QtGui.QFont()
        font.setFamily("Adobe Devanagari")
        font.setPointSize(36)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")

        self.stackedWidget.addWidget(self.page_3)
        self.page_4 = QtWidgets.QWidget()
        self.page_4.setObjectName("page_4")
        self.label_4 = QtWidgets.QLabel(self.page_4)
        self.label_4.setGeometry(QtCore.QRect(240, 160, 340, 81))
        font = QtGui.QFont()
        font.setFamily("Adobe Devanagari")
        font.setPointSize(48)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.pushButton_4 = QtWidgets.QPushButton(self.page_4)
        self.pushButton_4.setGeometry(QtCore.QRect(430, 360, 341, 61))
        self.pushButton_4.clicked.connect(self.btn_fun4)
        font = QtGui.QFont()
        font.setFamily("Adobe Devanagari")
        font.setPointSize(28)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setObjectName("pushButton_4")
        self.stackedWidget.addWidget(self.page_4)
        self.page_5 = QtWidgets.QWidget()
        self.page_5.setObjectName("page_5")
        self.label_5 = QtWidgets.QLabel(self.page_5)
        self.label_5.setGeometry(QtCore.QRect(210, 150, 381, 81))
        font = QtGui.QFont()
        font.setFamily("Adobe Devanagari")
        font.setPointSize(36)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")

        self.stackedWidget.addWidget(self.page_5)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.serth = SerialThread(portname, baudrate)  # Start serial thread
        self.serth.start()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "연결중입니다..."))
        self.pushButton_2.setText(_translate("MainWindow", "투입"))
        self.label_2.setText(_translate("MainWindow", "물체를 올려 놓고 투입 버튼을 눌러주세요"))
        self.label_3.setText(_translate("MainWindow", "판별중입니다"))
        self.label_4.setText(_translate("MainWindow", ""))
        self.pushButton_4.setText(_translate("MainWindow", "처음으로"))
        self.label_5.setText(_translate("MainWindow", "초기화중입니다..."))

    def btn_fun2(self):
        self.input_button_cnt += 1

    def btn_fun4(self):
        self.home_button_cnt += 1


class progressBarThread_25(QtCore.QThread):
    update_progress = pyqtSignal(int)

    def run(self):
        for x in range(0, 26, 1):
            self.update_progress.emit(x)
            time.sleep(0.2)


class progressBarThread_50(QtCore.QThread):
    update_progress = pyqtSignal(int)

    def run(self):
        for x in range(25, 51, 1):
            self.update_progress.emit(x)
            time.sleep(0.2)


class progressBarThread_75(QtCore.QThread):
    update_progress = pyqtSignal(int)

    def run(self):
        for x in range(50, 76, 1):
            self.update_progress.emit(x)
            time.sleep(0.2)

class progressBarThread_100(QtCore.QThread):
    update_progress = pyqtSignal(int)

    def run(self):
        for x in range(75, 101, 1):
            self.update_progress.emit(x)
            time.sleep(0.2)

class SerialThread(QtCore.QThread):

    def __init__(self, portname, baudrate):  # Initialise with serial port details
        QtCore.QThread.__init__(self)
        self.portname, self.baudrate = portname, baudrate
        self.txq = Queue.Queue()
        self.running = True

    def ser_out(self, s):  # Write outgoing data to serial port if open
        self.txq.put(s)  # ..using a queue to sync with reader thread

    def ser_in(self, s):  # Write incoming serial data to screen
        global in_s
        print(s)
        if s[0] == '<':
            in_s = s
        else:
            in_s = str(in_s + s)
        if in_s.find('>') != -1:
            in_s = str(in_s[0:in_s.find('>') + 1])

            if in_s == "<master|INIT>":
                ui.stackedWidget.setCurrentIndex(1)
                self.ser_out("<slave|INIT|ACK>")
            elif in_s == "<master|INPUT|button_wait>":
                if ui.input_button_cnt == 0:
                    self.ser_out("<slave|INPUT|button|no|ACK>")
                else:
                    self.ser_out("<slave|INPUT|button|yes|ACK>")
            elif in_s == "<master|INPUT|button_ok|ACK>":
                ui.stackedWidget.setCurrentIndex(2)
                ui.input_button_cnt = 0
                self.progressbar_worker1 = progressBarThread_25()
                if self.progressbar_worker1.isRunning() == False:
                    self.progressbar_worker1.start()
                    self.progressbar_worker1.update_progress.connect(self.worker_update)
            elif in_s == "<master|DETECT|25>":
                self.ser_out("<slave|DETECT|ACK>")
                self.progressbar_worker1.terminate()
                ui.progressBar.setValue(25)
                self.progressbar_worker2 = progressBarThread_50()
                if self.progressbar_worker2.isRunning() == False:
                    self.progressbar_worker2.start()
                    self.progressbar_worker2.update_progress.connect(self.worker_update)
            elif in_s == "<master|DETECT|50>":
                self.ser_out("<slave|DETECT|ACK>")
                self.progressbar_worker2.terminate()
                ui.progressBar.setValue(50)
                self.progressbar_worker3 = progressBarThread_75()
                if self.progressbar_worker3.isRunning() == False:
                    self.progressbar_worker3.start()
                    self.progressbar_worker3.update_progress.connect(self.worker_update)
            elif in_s == "<master|DETECT|75>":
                self.ser_out("<slave|DETECT|ACK>")
                self.progressbar_worker3.terminate()
                ui.progressBar.setValue(75)
                self.progressbar_worker4 = progressBarThread_100()
                if self.progressbar_worker4.isRunning() == False:
                    self.progressbar_worker4.start()
                    self.progressbar_worker4.update_progress.connect(self.worker_update)
            elif in_s == "<master|DETECT|100>":
                self.ser_out("<slave|DETECT|ACK>")
                self.progressbar_worker4.terminate()
                ui.progressBar.setValue(100)

            elif in_s == "<master|RESULT|0>":
                self.ser_out("<slave|RESULT|ACK>")
                ui.label_4.setText("캔")
                ui.label_4.repaint()
                ui.stackedWidget.setCurrentIndex(3)
            elif in_s == "<master|RESULT|1>":
                self.ser_out("<slave|RESULT|ACK>")
                ui.label_4.setText("유리")
                ui.label_4.repaint()
                ui.stackedWidget.setCurrentIndex(3)
            elif in_s == "<master|RESULT|2>":
                self.ser_out("<slave|RESULT|ACK>")
                ui.label_4.setText("페트")
                ui.label_4.repaint()
                ui.stackedWidget.setCurrentIndex(3)
            elif in_s == "<master|HOME|button_wait>":
                if ui.home_button_cnt == 0:
                    self.ser_out("<slave|HOME|button|no|ACK>")
                else:
                    self.ser_out("<slave|HOME|button|yes|ACK>")
            elif in_s == "<master|HOME|button_ok|ACK>":
                ui.stackedWidget.setCurrentIndex(4)
                ui.home_button_cnt = 0
            elif in_s == "<master|COMPLETE>":
                self.ser_out("<slave|COMPLETE|ACK>")
                ui.stackedWidget.setCurrentIndex(1)
            else:
                print("unkown data")
                self.ser_out("<NACK>")
            in_s = ''

    def worker_update(self, val):
        ui.progressBar.setValue(val)

    def run(self):  # Run serial reader thread
        print("Opening %s at %u baud %s" % (self.portname, self.baudrate,
                                            "(hex display)" if hexmode else ""))
        try:
            self.ser = serial.Serial(self.portname, self.baudrate, timeout=SER_TIMEOUT)
            time.sleep(SER_TIMEOUT * 1.2)
            self.ser.flushInput()
        except:
            self.ser = None
        if not self.ser:
            print("Can't open port")
            self.running = False
        while self.running:
            s = self.ser.read(self.ser.in_waiting or 1)
            if s:  # Get data from serial port
                self.ser_in(bytes_str(s))  # ..and convert to string
            if not self.txq.empty():
                txd = str(self.txq.get())  # If Tx data in queue, write to serial port
                self.ser.write(str_bytes(txd))
        if self.ser:  # Close serial port when thread finished
            self.ser.close()
            self.ser = None


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.showFullScreen()
    sys.exit(app.exec_())
